

import 'dart:convert';

import 'package:flutter/cupertino.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:uuid/uuid.dart';

import '../singletons.dart';

class ChatUser{
  /// Uid generated by Supabase. Only value is ''.
  final String uid;
  /// Name of user.
  final String name;
  /// Email address of user.
  final String email;
  /// Signature of user. If not provided default is ''.
  final String signature;
  /// Image of Url, if not provided a default will be used.
  final String avatarUrl;
  /// Date of creation
  final DateTime dateCreated;

  /// User of a chatroom.
  ChatUser({
    required this.uid,
    required this.name,
    required this.email,
    required this.signature,
    required this.avatarUrl,
    required this.dateCreated,
  });

  /// Converts a ChatUser object to a Map.
  Map<String, dynamic> toMap() {
    return {
      //'uid': uid,
      'name': name,
      'email': email,
      'signature': signature,
      'avatarurl': avatarUrl,
      'datecreated': dateCreated.toIso8601String(),
    };
  }

  /// Creates a ChatUser from Map.
  static ChatUser fromMap(Map<String, dynamic> map) {
    return ChatUser(
      uid: map['uid'],
      name: map['name'],
      email: map['email'],
      signature: map['signature'] ?? '',
      avatarUrl: map['avatarurl'] ?? '',
      dateCreated: DateTime.parse(map['datecreated']),
    );
  }
}

class ChatUserService {

  Future<void> toSupabase(ChatUser user) async {
    await supabaseClient.from('chat_users').insert(user.toMap());
    debugPrint("ChatUser object inserted");
  }

  ChatUser create(
      String name,
      String email,
      String signature,
      String avatarUrl) {
    return ChatUser(
        uid: '',
        name: name,
        email: email,
        signature: signature,
        avatarUrl: avatarUrl,
        dateCreated: DateTime.now());
  }

  Future<void> testInsert() async
  {
    ChatUser alpha = create(
        'Alpha', 'alpha@yahoo.com', '', '');
    ChatUser beta = create(
        'Beta', 'beta@gmail.com', 'I am a beta male!', 'handsomeman.jpg');
    ChatUser gamma = create(
        'Gamma', 'gamma_man@msn.com', '', 'duck.png');
    await toSupabase(alpha);
    await toSupabase(beta);
    await toSupabase(gamma);
  }

  Future<List> fromSupabase(bool test) async {
    final response = await supabaseClient.from('chat_users').select();
    List<dynamic> jsonArray = jsonDecode(jsonEncode(response));
    List<ChatUser> result = jsonArray.map((e) =>
        ChatUser.fromMap(e)).toList();
    if (test == true) {
      for (var chat in result) {
        debugPrint(chat.name);
        debugPrint(chat.signature);
        debugPrint(chat.avatarUrl);
      }
    }
    return result;
  }

  Stream<List<ChatUser>> getStream(bool test) {
    final response = supabaseClient
        .from('chat_users')
        .stream(primaryKey: ['uid'])
        //.order('datecreated')
        .map((maps) =>
        List<Map<String, dynamic>>.from(maps).map((map) =>
            ChatUser.fromMap(map)).toList());
    if (test == true){
      response.listen((data) {
        for (var chat in data) {
          debugPrint(chat.name);
          debugPrint(chat.signature);
          debugPrint(chat.avatarUrl);
        }
      });
    }
    return response;
  }
}
